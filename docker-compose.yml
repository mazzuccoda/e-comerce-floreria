version: '3.9'

services:
  # Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-floreria_cristina}
      POSTGRES_USER: ${POSTGRES_USER:-floradmin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-florpassword}
      POSTGRES_INITDB_ARGS: "--data-checksums --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    command: ["postgres", "-c", "shared_buffers=512MB"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-floradmin}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - backend

  # Application
  web:
    build: 
      context: .
      target: production
    command: >
      sh -c "
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 floreria_cristina.wsgi:application
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=floreria_cristina.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER:-floradmin}:${POSTGRES_PASSWORD:-florpassword}@db:5432/${POSTGRES_DB:-floreria_cristina}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - backend
      - frontend

  # Celery worker
  celery_worker:
    build: 
      context: .
      target: production
    command: >
      sh -c "celery -A floreria_cristina worker \
      --loglevel=info \
      --concurrency=4"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=floreria_cristina.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER:-floradmin}:${POSTGRES_PASSWORD:-florpassword}@db:5432/${POSTGRES_DB:-floreria_cristina}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
    depends_on:
      - db
      - redis
      - web
    restart: unless-stopped
    networks:
      - backend

  # Celery beat for scheduled tasks
  celery_beat:
    build: 
      context: .
      target: production
    command: >
      sh -c "python -c 'import django; django.setup()' && \
      celery -A floreria_cristina beat -l info"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=floreria_cristina.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER:-floradmin}:${POSTGRES_PASSWORD:-florpassword}@db:5432/${POSTGRES_DB:-floreria_cristina}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-your_redis_password}@redis:6379/0
      - CELERY_BEAT_SCHEDULER=django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    restart: unless-stopped
    networks:
      - backend

  # Nginx as reverse proxy (development)
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/django-dev.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs/nginx:/var/log/nginx
    environment:
      - NGINX_HOST=localhost
    command: ["nginx", "-g", "daemon off;"]
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - frontend

  # pgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - backend

  # Redis Commander service has been temporarily removed due to configuration issues

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  postgres_data:
  staticfiles_volume:
  redis_data:
  static_volume:
  media_volume:
  pgadmin_data:
