services:
  # Servicio del Backend (Django)
  web:
    build:
      context: .
      target: development
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - app_net

  # Servicio del Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules # Evita que node_modules local sobreescriba el del contenedor
      - next_data:/app/.next # Usa un volumen nombrado para .next para arreglar permisos
    user: root
    command: sh -c "chown -R nextjs:nextjs /app/.next && su-exec nextjs npm run dev"
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=http://localhost
    networks:
      - app_net

  # Base de Datos (PostgreSQL)
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app_net

  # Redis
  redis:
    image: redis:7-alpine
    networks:
      - app_net

  # Celery Worker
  celery_worker:
    build:
      context: .
      target: development
    command: celery -A floreria_cristina worker --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - app_net

  # Celery Beat
  celery_beat:
    build:
      context: .
      target: development
    command: celery -A floreria_cristina beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    networks:
      - app_net

  # Nginx
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./media:/app/mediafiles # Montar la carpeta de medios para que Nginx pueda servirla
      - ./staticfiles:/app/staticfiles # Montar la carpeta de archivos est√°ticos para que Nginx pueda servirla
    depends_on:
      - web
      - frontend
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  postgres_data:
  next_data:
