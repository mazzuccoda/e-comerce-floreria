"""
Django settings for floreria_cristina project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import environ

# Initialize environment variables
env = environ.Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-iqrk-k9+a7=+pj^w=a^10*coqt=tqj1sf^&!s6$^li541g^(i+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'web',
    'testserver',
    *env.list('ALLOWED_HOSTS', default=[]),
]

# Configuración para funcionar detrás de un proxy inverso (Nginx)
# Estas directivas le indican a Django que confíe en las cabeceras que Nginx le envía.
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:80',
    'http://127.0.0.1:80',
    'http://localhost',
    'http://127.0.0.1',
]

# Permitir cookies y credenciales en peticiones CORS
CORS_ALLOW_CREDENTIALS = True

# Permitir todos los headers para desarrollo
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Si en el futuro necesitas que cualquier sitio pueda consultar tu API (no recomendado para producción sin autenticación)
# podrías usar:
# CORS_ORIGIN_ALLOW_ALL = True



CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://web:8000',
    'http://localhost',  # Permitir el origen público a través de Nginx
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# Eximir APIs del carrito y usuarios del CSRF
CSRF_EXEMPT_URLS = [
    r'^/api/carrito/',
    r'^/api/usuarios/',
]

# Deshabilitar CSRF para desarrollo (temporal)
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
]

THIRD_PARTY_APPS = [
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'compressor',
    'debug_toolbar',
    'django_celery_beat',
]

LOCAL_APPS = [
    'core',
    'catalogo',
    'carrito',
    'pedidos',
    'usuarios',
    'notificaciones',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS + [
    'crispy_forms',
    'crispy_bootstrap5',
    'widget_tweaks',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
]

# ==============================================================================
# AUTHENTICATION CONFIGURATION
# ==============================================================================

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Django Allauth Configuration
SITE_ID = 1
LOGIN_REDIRECT_URL = '/'
ACCOUNT_LOGOUT_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Change to 'mandatory' in production
ACCOUNT_SESSION_REMEMBER = True


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'floreria_cristina.csrf_middleware.CustomCsrfMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',  # Deshabilitado temporalmente
    'allauth.account.middleware.AccountMiddleware',
    # 'floreria_cristina.middleware.ConnectionMiddleware',  # Deshabilitado temporalmente
]

ROOT_URLCONF = 'floreria_cristina.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.admin_context.admin_stats',
            ],
        },
    },
]

WSGI_APPLICATION = 'floreria_cristina.wsgi.application'

# Using default User model with profile extension

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Cart session ID
CART_SESSION_ID = 'cart'

# Configuración de la base de datos con opciones mejoradas
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB', default='floreria_cristina_dev'),
        'USER': env('POSTGRES_USER', default='floradmin'),
        'PASSWORD': env('POSTGRES_PASSWORD', default='florpassword'),
        'HOST': 'db',
        'PORT': '5432',
        'CONN_MAX_AGE': 0,  # Deshabilitar conexiones persistentes para el wizard
        'OPTIONS': {
            'connect_timeout': 30,
            'application_name': 'floreria_cristina_dev',
            'options': '-c statement_timeout=30000',  # 30 segundos de timeout
        },
    }
}

# Deshabilitar el pool de conexiones para el wizard
DATABASES['default']['DISABLE_SERVER_SIDE_CURSORS'] = True

# Configuración para cerrar conexiones inactivas
django_db_logger_use_database = 'default'

# Configuración de conexiones persistentes
if not DEBUG:
    CONN_HEALTH_CHECKS = True
    CONN_MAX_AGE = 600  # 10 minutos
    CONN_HEALTH_CHECK_INTERVAL = 60  # Verificar cada minuto


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-ar'

TIME_ZONE = 'America/Argentina/Buenos_Aires'

USE_I18N = True

USE_TZ = True


# Email Backend Configuration
# --------------------------------------------------------------------------
# Para desarrollo: mostrar emails en consola
EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')

# Para producción con Gmail/SMTP
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')

DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='no-responder@floreriacristina.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# Configuracion de Twilio para WhatsApp
# ATENCION: En producción, usar variables de entorno para estas credenciales.
TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID', default='ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN', default='your_auth_token')
TWILIO_WHATSAPP_NUMBER = env('TWILIO_WHATSAPP_NUMBER', default='+14155238886')  # Número de sandbox o comprado
TWILIO_SMS_NUMBER = env('TWILIO_SMS_NUMBER', default='')  # Número para SMS

# Configuración Mercado Pago
MERCADOPAGO = {
    'ACCESS_TOKEN': os.getenv('MP_ACCESS_TOKEN', 'TEST-1234567890123456-123456-1234567890abcdef1234567890abcdef123456'),
    'PUBLIC_KEY': os.getenv('MP_PUBLIC_KEY', 'TEST-12345678-1234-1234-1234-123456789012'),
    'AUTO_RETURN': 'approved',
    'SANDBOX': True
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Staticfiles finders - including Django Compressor
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
]

# Django Compressor settings
COMPRESS_ENABLED = True
COMPRESS_URL = STATIC_URL
COMPRESS_ROOT = STATIC_ROOT
# Compile SCSS files to CSS using django-libsass
COMPRESS_PRECOMPILERS = (
    ('text/x-scss', 'django_libsass.SassCompiler'),
)

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Authentication
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Allauth settings
SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
LOGIN_REDIRECT_URL = '/'  # Redirección post-login
LOGIN_URL = '/accounts/login/'
LOGOUT_REDIRECT_URL = '/accounts/login/'
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'

# Email settings (for development)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Debug Toolbar
INTERNAL_IPS = [
    '127.0.0.1',
]

# Configuración del carrito
CART_SESSION_ID = 'carrito'

# Serializer personalizado para sesiones que maneja Decimal
SESSION_SERIALIZER = 'floreria_cristina.session_serializer.CustomJSONSerializer'

# Celery Configuration
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/Argentina/Buenos_Aires'

# Celery Beat Configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Configuración de autenticación social
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'}
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'FIELDS': ['id', 'email', 'name']
    }
}
