version: '3.9'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=floreria_cristina.settings.production
    depends_on:
      - db
      - redis
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 300 floreria_cristina.wsgi:application"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    networks:
      - app_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BACKEND_URL=https://api.floreriacristina.com
    networks:
      - app_net

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    env_file: .env.prod
    command: >
      celery -A floreria_cristina worker --loglevel=info --concurrency=4
    depends_on:
      - db
      - redis
    networks:
      - app_net

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    env_file: .env.prod
    command: >
      celery -A floreria_cristina beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - db
      - redis
    networks:
      - app_net

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file: .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_net

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app_net

  nginx:
    image: nginx:1.23-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/prod.conf.d:/etc/nginx/conf.d
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/ssl/certs
    depends_on:
      - web
      - frontend
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
