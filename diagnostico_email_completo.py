#!/usr/bin/env python
"""
Diagn√≥stico Completo de Email con Gmail SMTP
Este script prueba TODAS las posibles causas de fallo
"""
import os
import sys
import django
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'floreria_cristina.settings')
django.setup()

from django.conf import settings
from django.core.mail import send_mail

print("=" * 100)
print("üîç DIAGN√ìSTICO COMPLETO DE EMAIL - GMAIL SMTP")
print("=" * 100)

# ============================================================================
# PASO 1: VERIFICAR CONFIGURACI√ìN
# ============================================================================
print("\n" + "=" * 100)
print("üìã PASO 1: VERIFICACI√ìN DE CONFIGURACI√ìN")
print("=" * 100)

config_ok = True

print(f"\n1. EMAIL_BACKEND: {settings.EMAIL_BACKEND}")
if settings.EMAIL_BACKEND != 'django.core.mail.backends.smtp.EmailBackend':
    print("   ‚ùå ERROR: Debe ser 'django.core.mail.backends.smtp.EmailBackend'")
    config_ok = False
else:
    print("   ‚úÖ Correcto")

print(f"\n2. EMAIL_HOST: {settings.EMAIL_HOST}")
if settings.EMAIL_HOST != 'smtp.gmail.com':
    print("   ‚ùå ERROR: Debe ser 'smtp.gmail.com'")
    config_ok = False
else:
    print("   ‚úÖ Correcto")

print(f"\n3. EMAIL_PORT: {settings.EMAIL_PORT}")
if settings.EMAIL_PORT not in [587, 465]:
    print("   ‚ùå ERROR: Debe ser 587 (TLS) o 465 (SSL)")
    config_ok = False
else:
    print(f"   ‚úÖ Correcto (Puerto {settings.EMAIL_PORT})")

print(f"\n4. EMAIL_USE_TLS: {settings.EMAIL_USE_TLS}")
if settings.EMAIL_PORT == 587 and not settings.EMAIL_USE_TLS:
    print("   ‚ùå ERROR: TLS debe estar activado para puerto 587")
    config_ok = False
else:
    print("   ‚úÖ Correcto")

print(f"\n5. EMAIL_HOST_USER: {settings.EMAIL_HOST_USER}")
if not settings.EMAIL_HOST_USER:
    print("   ‚ùå ERROR: Email de usuario no configurado")
    config_ok = False
elif not settings.EMAIL_HOST_USER.endswith('@gmail.com'):
    print("   ‚ö†Ô∏è  ADVERTENCIA: No es una cuenta @gmail.com")
else:
    print("   ‚úÖ Correcto")

print(f"\n6. EMAIL_HOST_PASSWORD: {'*' * len(settings.EMAIL_HOST_PASSWORD) if settings.EMAIL_HOST_PASSWORD else 'NO CONFIGURADO'}")
if not settings.EMAIL_HOST_PASSWORD:
    print("   ‚ùå ERROR: Contrase√±a no configurada")
    config_ok = False
else:
    password_len = len(settings.EMAIL_HOST_PASSWORD)
    print(f"   üìè Longitud: {password_len} caracteres")
    
    # Verificar formato de contrase√±a de aplicaci√≥n
    password_clean = settings.EMAIL_HOST_PASSWORD.replace(' ', '')
    if password_len == 16 or len(password_clean) == 16:
        print("   ‚úÖ Longitud correcta para contrase√±a de aplicaci√≥n (16 caracteres)")
    else:
        print(f"   ‚ö†Ô∏è  ADVERTENCIA: Longitud inusual ({password_len} caracteres)")
        print("      Las contrase√±as de aplicaci√≥n de Gmail tienen 16 caracteres")

print(f"\n7. DEFAULT_FROM_EMAIL: {settings.DEFAULT_FROM_EMAIL}")
print("   ‚ÑπÔ∏è  Este es el remitente que aparecer√° en los emails")

if not config_ok:
    print("\n" + "=" * 100)
    print("‚ùå CONFIGURACI√ìN INCORRECTA - Corrige los errores antes de continuar")
    print("=" * 100)
    sys.exit(1)

print("\n‚úÖ CONFIGURACI√ìN B√ÅSICA CORRECTA")

# ============================================================================
# PASO 2: PRUEBA DE CONEXI√ìN SMTP
# ============================================================================
print("\n" + "=" * 100)
print("üîå PASO 2: PRUEBA DE CONEXI√ìN SMTP")
print("=" * 100)

try:
    print(f"\n1. Conectando a {settings.EMAIL_HOST}:{settings.EMAIL_PORT}...")
    server = smtplib.SMTP(settings.EMAIL_HOST, settings.EMAIL_PORT, timeout=10)
    print("   ‚úÖ Conexi√≥n establecida")
    
    print("\n2. Iniciando modo debug...")
    server.set_debuglevel(2)  # Mostrar toda la comunicaci√≥n SMTP
    
    print("\n3. Enviando EHLO...")
    server.ehlo()
    print("   ‚úÖ EHLO exitoso")
    
    print("\n4. Iniciando TLS...")
    server.starttls()
    print("   ‚úÖ TLS iniciado")
    
    print("\n5. Enviando EHLO nuevamente despu√©s de TLS...")
    server.ehlo()
    print("   ‚úÖ EHLO post-TLS exitoso")
    
    print("\n6. Autenticando...")
    print(f"   Usuario: {settings.EMAIL_HOST_USER}")
    print(f"   Password: {'*' * 16}")
    
    try:
        server.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)
        print("   ‚úÖ AUTENTICACI√ìN EXITOSA")
        auth_ok = True
    except smtplib.SMTPAuthenticationError as e:
        print(f"   ‚ùå ERROR DE AUTENTICACI√ìN: {e}")
        print("\n   üí° POSIBLES CAUSAS:")
        print("      1. Contrase√±a de aplicaci√≥n incorrecta")
        print("      2. Verificaci√≥n en 2 pasos no activada")
        print("      3. Contrase√±a de aplicaci√≥n revocada")
        print("\n   üîß SOLUCI√ìN:")
        print("      1. Ve a: https://myaccount.google.com/apppasswords")
        print("      2. Genera una NUEVA contrase√±a de aplicaci√≥n")
        print("      3. Actualiza EMAIL_HOST_PASSWORD en Railway")
        auth_ok = False
    
    if auth_ok:
        print("\n7. Cerrando conexi√≥n...")
        server.quit()
        print("   ‚úÖ Conexi√≥n cerrada correctamente")
    
except smtplib.SMTPConnectError as e:
    print(f"   ‚ùå ERROR DE CONEXI√ìN: {e}")
    print("\n   üí° POSIBLES CAUSAS:")
    print("      1. Firewall bloqueando puerto 587")
    print("      2. Gmail SMTP no disponible")
    print("      3. Problema de red")
    
except smtplib.SMTPServerDisconnected as e:
    print(f"   ‚ùå SERVIDOR DESCONECTADO: {e}")
    
except Exception as e:
    print(f"   ‚ùå ERROR INESPERADO: {e}")
    import traceback
    traceback.print_exc()
    auth_ok = False

if not auth_ok:
    print("\n" + "=" * 100)
    print("‚ùå AUTENTICACI√ìN FALLIDA - No se pueden enviar emails")
    print("=" * 100)
    sys.exit(1)

# ============================================================================
# PASO 3: ENV√çO DE EMAIL DE PRUEBA CON SMTPLIB PURO
# ============================================================================
print("\n" + "=" * 100)
print("üìß PASO 3: ENV√çO DE EMAIL DE PRUEBA (SMTPLIB PURO)")
print("=" * 100)

try:
    print("\n1. Creando mensaje...")
    msg = MIMEMultipart()
    msg['From'] = settings.DEFAULT_FROM_EMAIL
    msg['To'] = 'mazzucoda@gmail.com'
    msg['Subject'] = 'üß™ Prueba SMTP Directa - Diagn√≥stico Completo'
    
    body = """Este es un email de prueba usando smtplib directamente.

Si recibes este mensaje, significa que:
‚úÖ La conexi√≥n SMTP funciona
‚úÖ La autenticaci√≥n es correcta
‚úÖ Gmail acepta y ENV√çA el email

Timestamp: """ + str(os.popen('date').read())
    
    msg.attach(MIMEText(body, 'plain'))
    print("   ‚úÖ Mensaje creado")
    
    print("\n2. Conectando a Gmail SMTP...")
    server = smtplib.SMTP(settings.EMAIL_HOST, settings.EMAIL_PORT, timeout=10)
    server.set_debuglevel(1)
    server.starttls()
    server.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)
    print("   ‚úÖ Conectado y autenticado")
    
    print("\n3. Enviando email...")
    print(f"   De: {msg['From']}")
    print(f"   Para: {msg['To']}")
    print(f"   Asunto: {msg['Subject']}")
    
    result = server.send_message(msg)
    
    print("\n   üìä RESULTADO DEL ENV√çO:")
    if result:
        print(f"   ‚ö†Ô∏è  Algunos destinatarios rechazados: {result}")
    else:
        print("   ‚úÖ EMAIL ENVIADO EXITOSAMENTE")
        print("\n   üéØ ACCI√ìN REQUERIDA:")
        print("      1. Revisa la bandeja de entrada de mazzucoda@gmail.com")
        print("      2. Revisa tambi√©n la carpeta de SPAM")
        print("      3. Si NO llega en 2 minutos, el problema es de Gmail")
    
    server.quit()
    
except Exception as e:
    print(f"\n   ‚ùå ERROR ENVIANDO EMAIL: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# PASO 4: ENV√çO CON DJANGO send_mail()
# ============================================================================
print("\n" + "=" * 100)
print("üìß PASO 4: ENV√çO DE EMAIL DE PRUEBA (DJANGO send_mail)")
print("=" * 100)

try:
    print("\n1. Enviando con Django send_mail()...")
    
    result = send_mail(
        subject='üß™ Prueba Django - Diagn√≥stico Completo',
        message='''Este es un email de prueba usando Django send_mail().

Si recibes este mensaje, significa que Django est√° configurado correctamente.

Timestamp: ''' + str(os.popen('date').read()),
        from_email=settings.DEFAULT_FROM_EMAIL,
        recipient_list=['mazzucoda@gmail.com'],
        fail_silently=False
    )
    
    print(f"\n   üìä RESULTADO: {result}")
    if result == 1:
        print("   ‚úÖ Django reporta env√≠o exitoso")
        print("\n   üéØ ACCI√ìN REQUERIDA:")
        print("      1. Revisa mazzucoda@gmail.com en 1-2 minutos")
        print("      2. Si NO llega, el problema NO es de c√≥digo")
        print("      3. El problema ser√≠a de Gmail bloqueando el env√≠o")
    else:
        print("   ‚ùå Django reporta fallo en el env√≠o")
    
except Exception as e:
    print(f"\n   ‚ùå ERROR: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# PASO 5: VERIFICACIONES ADICIONALES
# ============================================================================
print("\n" + "=" * 100)
print("üîç PASO 5: VERIFICACIONES ADICIONALES")
print("=" * 100)

print("\n1. Verificar l√≠mites de Gmail:")
print("   ‚ÑπÔ∏è  Gmail tiene l√≠mites de env√≠o:")
print("      - Cuentas gratuitas: 500 emails/d√≠a")
print("      - Con SMTP: 100-500 emails/d√≠a")
print("      - Por hora: ~100 emails")
print("\n   üéØ ACCI√ìN: Verifica en Gmail si has excedido l√≠mites")

print("\n2. Verificar reputaci√≥n del remitente:")
print(f"   üìß Remitente: {settings.EMAIL_HOST_USER}")
print("   ‚ÑπÔ∏è  Si Gmail detecta spam, puede bloquear silenciosamente")
print("\n   üéØ ACCI√ìN: Revisa https://postmaster.google.com/")

print("\n3. Verificar configuraci√≥n de seguridad:")
print("   üîê Verificaci√≥n en 2 pasos: DEBE estar activada")
print("   üîë Contrase√±a de aplicaci√≥n: DEBE ser v√°lida")
print("\n   üéØ ACCI√ìN: Ve a https://myaccount.google.com/security")

print("\n4. Verificar actividad reciente:")
print("   üìä Gmail puede bloquear si detecta actividad sospechosa")
print("\n   üéØ ACCI√ìN: Ve a https://myaccount.google.com/notifications")

# ============================================================================
# RESUMEN FINAL
# ============================================================================
print("\n" + "=" * 100)
print("üìä RESUMEN Y PR√ìXIMOS PASOS")
print("=" * 100)

print("\n‚úÖ VERIFICACIONES COMPLETADAS:")
print("   1. Configuraci√≥n de Django")
print("   2. Conexi√≥n SMTP")
print("   3. Autenticaci√≥n")
print("   4. Env√≠o de emails de prueba")

print("\nüéØ PR√ìXIMOS PASOS:")
print("\n   A. SI LOS EMAILS DE PRUEBA LLEGARON:")
print("      ‚Üí El sistema funciona correctamente")
print("      ‚Üí El problema era temporal o de cach√©")
print("      ‚Üí Puedes seguir usando Gmail SMTP")

print("\n   B. SI LOS EMAILS NO LLEGARON:")
print("      ‚Üí La autenticaci√≥n funciona PERO Gmail bloquea el env√≠o")
print("      ‚Üí Posibles causas:")
print("         1. Gmail detecta la app como spam")
print("         2. Falta configuraci√≥n SPF/DKIM")
print("         3. L√≠mites de env√≠o excedidos")
print("         4. Cuenta marcada como sospechosa")
print("      ‚Üí Soluciones:")
print("         1. Usar SendGrid (100 emails/d√≠a gratis)")
print("         2. Usar Mailgun (5000 emails/mes gratis)")
print("         3. Configurar dominio propio con SPF/DKIM")

print("\n   C. VERIFICACIONES MANUALES:")
print("      1. Revisa mazzucoda@gmail.com (inbox y spam)")
print("      2. Espera 2-3 minutos para que lleguen")
print("      3. Si no llegan, el problema es de Gmail")

print("\n" + "=" * 100)
print("‚úÖ DIAGN√ìSTICO COMPLETADO")
print("=" * 100)
