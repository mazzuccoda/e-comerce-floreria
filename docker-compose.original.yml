version: '3'

services:
  web:
    container_name: e-comerce-web-1
    image: e-comerce-web:latest  # Usar la imagen existente en lugar de reconstruir
    env_file:
      - .env.docker
    command: >-
      python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - app_net

  # Celery Worker
  celery_worker:
    image: e-comerce-celery_worker:latest  # Usar la imagen existente
    env_file:
      - .env.docker
    command: celery -A floreria_cristina worker -l INFO
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
    networks:
      - app_net

  # Database
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=floradmin
      - POSTGRES_PASSWORD=florpassword
      - POSTGRES_DB=floreria_cristina_dev
    ports:
      - "5432:5432"
    networks:
      - app_net

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app_net
      
  # Frontend
  frontend:
    container_name: e-comerce-frontend-1
    image: e-comerce-frontend:latest  # Usar la imagen existente
    volumes:
      - ./frontend:/app
      - next_data:/app/.next
    ports:
      - "3000:3000"
    networks:
      - app_net
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=http://web:8000

  # Celery Beat
  celery_beat:
    image: e-comerce-celery_beat:latest  # Usar la imagen existente
    env_file:
      - .env.docker
    command: celery -A floreria_cristina beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - db
    networks:
      - app_net

  # Nginx
  nginx:
    image: nginx:1.23-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./frontend/public:/app/frontend/public
    depends_on:
      - web
      - frontend
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  postgres_data:
  next_data:
